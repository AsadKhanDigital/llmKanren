(define (f x y)
    (if (null? x)
        y
        (cons (car x) (f (cdr x) y))
    )
)

(define (f x y)
    (letrec ((helper (lambda (a b)
                        (if (null? a)
                            b
                            (cons (car a) (helper (cdr a) b)))))
    )
    (helper x y)
)

(define (f x y)
    (if (and (not (null? x)) (not (null? y)))
        (cons (car x) (cons (car y) (f (cdr x) (cdr y))))
        (if (null? x)
            y
            x)
    )
)

(define (f x y)
    (if (or (null? x) (null? y))
        (list)
        (cons (car x) (f (cdr x) (cdr y)))
    )
)

(define (f x y)
    (let ((z (if (null? x) y (car x))))
        (if (null? x)
            (list)
            (cons z (f (cdr x) y)))
    )
)

(define (f x y)
    (if (pair? x)
        (cons (car x) (f (cdr x) y))
        y
    )
)

(define (f x y)
    (let ((result (if (equal? x y) (list) (cons x y))))
        (if (null? result)
            (list)
            result)
    )
)

(define (f x y)
    (if (symbol? (car x))
        (cons (car x) (f (cdr x) y))
        (if (null? x)
            y
            (f (cdr x) y))
    )
)

(define (f x y)
    (if (null? x)
        (list)
        (cons (car x) (f (cdr x) y))
    )
)

(define (f x y)
    (let ((result (if (null? x) y (list (car x) (car y)))))
        (if (null? result)
            (list)
            result)
    )
)

(define (f x y)
    (if (not (pair? x))
        (list)
        (cons (car x) (f (cdr x) y))
    )
)

(define (f x y)
    (if (and (not (null? x)) (not (null? y)))
        (cons (car x) (f (cdr x) y))
        y
    )
)

(define (f x y)
    (lambda (a b)
        (if (null? a)
            b
            (cons (car a) ((f (cdr a)) b)))
    )
)

(define (f x y)
    (if (and (not (null? x)) (not (null? y)))
        (letrec ((combine (lambda (a b)
                           (if (null? a)
                               b
                               (cons (car a) (combine (cdr a) b)))
                           ))
                )
        (combine x y)
        )
        (list)
    )
)

(define (f x y)
    (if (null? x)
        y
        (cons (car x) (f (cdr x) y))
    )
)

(define (f x y)
    (let ((result (list)))
        (if (null? x)
            (append result y)
            (append (cons (car x) result) (f (cdr x) y)))
        )
    )
)

(define (f x y)
    (if (or (null? x) (null? y))
        y
        (cons (car x) (f (cdr x) (cdr y)))
    )
)

(define (f x y)
    (if (not (null? x))
        (cons (car x) (f (cdr x) y))
        (if (not (null? y))
            (list)
            (list)
        )
    )
)

(define (f x y)
    (if (null? x)
        (list)
        (cons (car x) (f (cdr x) (cdr y)))
    )
)

(define (f x y)
    (letrec ((g (lambda (x y)
                  (if (null? x)
                      y
                      (cons (car x) (g (cdr x) y)))))
             )
        (g x y)
    )
)

(define (f x y)
    (if (not (pair? x))
        (list)
        (cons (car x) (f (cdr x) y))
    )
)

(define (f x y)
    (if (or (null? x) (null? y))
        (list)
        (cons (car x) (f (cdr x) (cdr y)))
    )
)

(define (f x y)
    (let ((temp (if (null? x) 
                   y 
                   (cons (car x) (f (cdr x) y)))))
     (if (null? temp)
         (list)
         temp))
)

(define (f x y)
    (if (or (null? x) (null? y))
        (list)
        (cons (car x) (f (cdr x) (cdr y)))
    )
)

(define (f x y)
    (if (symbol? (car x))
        (cons (car x) (f (cdr x) y))
        (if (null? x)
            y
            (f (cdr x) y))
    )
)

(define (f x y)
    (if (null? x)
        (list)
        (letrec ((helper (lambda (a b)
                            (if (null? a)
                                b
                                (cons (car a) (helper (cdr a) b))))))
            (helper x y))
    )
)

(define (f x y)
    (if (null? x)
        (list)
        (cons (car x) (f (cdr x) y))
    )
)

(define (f x y)
    (if (or (null? x) (null? y))
        (list)
        (letrec ((combine (lambda (a b)
                            (if (null? a)
                                b
                                (cons (car a) (combine (cdr a) b)))))
            )
        (combine x y)
        )
    )
)

(define (f x y)
    (if (null? x)
        y
        (cons (car x) (f (cdr x) y))
    )
)

(define (f x y)
    (let ((result (if (null? x) y (list (car x) (car y)))))
        (if (null? result)
            (list)
            result)
    )
)

(define (f x y)
    (if (not (null? x))
        (cons (car x) (f (cdr x) y))
        (if (not (null? y))
            (list)
            (list)
        )
    )
)

(define (f x y)
    (if (not (null? x))
        (let ((temp (car x)))
            (if (null? y)
                (list temp)
                (cons temp (f (cdr x) (cdr y)))))
        y
    )
)

(define (f x y)
    (if (null? x)
        (list)
        (letrec ((combine (lambda (a b)
                            (if (null? a)
                                b
                                (cons (car a) (combine (cdr a) b)))))
            )
        (combine x y)
        )
    )
)

(define (f x y)
    (if (not (pair? x))
        (list)
        (cons (car x) (f (cdr x) y))
    )
)

(define (f x y)
    (if (or (null? x) (null? y))
        (list)
        (letrec ((combine (lambda (a b)
                            (if (null? a)
                                b
                                (cons (car a) (combine (cdr a) b)))))
            )
        (combine x (cdr y))
        )
    )
)

(define (f x y)
    (if (null? x)
        (list)
        (letrec ((g (lambda (x y)
                       (if (null? x)
                           y
                           (cons (car x) (g (cdr x) y)))))
               )
            (g x y))
    )
)